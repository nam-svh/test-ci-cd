name: CI Workflow

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      FVM_CACHE_PATH: /home/runner/.fvm
      FLUTTER_VERSION: 3.27.4

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Inspect project folders
      run: |
        echo "üîç Checking .fvm directory"
        ls -la .fvm || echo ".fvm folder not found"
        echo "üîç Checking .dart_tool directories"
        ls -la .dart_tool || echo ".dart_tool not found at root"
        ls -la apps/**/.dart_tool || echo ".dart_tool not found in apps"
        ls -la packages/**/.dart_tool || echo ".dart_tool not found in packages"
    
        echo "üîç Checking pub-cache"
        ls -la ~/.pub-cache || echo "pub-cache folder not found"

    # Cache FVM (project .fvm + global SDK versions)
    - name: Cache FVM (project + global versions)
      id: fvm-cache
      uses: actions/cache@v4
      with:
        path: |
          .fvm
          ${{ env.FVM_CACHE_PATH }}/versions
        key: ${{ runner.os }}-fvm-${{ env.FLUTTER_VERSION }}-${{ hashFiles('.fvm/fvm_config.json') }}
        restore-keys: |
          ${{ runner.os }}-fvm-
    - name: Check FVM Cache status
      run: |
        if [ "${{ steps.fvm-cache.outputs.cache-hit }}" == "true" ]; then
          echo "‚úÖ FVM Cache HIT"
        else
          echo "‚ö†Ô∏è FVM Cache MISS - Will install Flutter SDK"
        fi

    # Cache pub-cache
    - name: Cache Dart pub-cache
      id: pub-cache
      uses: actions/cache@v4
      with:
        path: ~/.pub-cache
        key: ${{ runner.os }}-pub-cache-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-pub-cache-
    - name: Check pub-cache status
      run: |
        if [ "${{ steps.pub-cache.outputs.cache-hit }}" == "true" ]; then
          echo "‚úÖ Pub Cache HIT"
        else
          echo "‚ö†Ô∏è Pub Cache MISS - Will run pub get"
        fi

    # Cache .dart_tool (root + packages/**)
    - name: Cache .dart_tool folders
      id: dart-tool-cache
      uses: actions/cache@v4
      with:
        path: |
          .dart_tool
          packages/**/.dart_tool
        key: ${{ runner.os }}-dart-tool-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: |
          ${{ runner.os }}-dart-tool-
    - name: Check .dart_tool cache status
      run: |
        if [ "${{ steps.dart-tool-cache.outputs.cache-hit }}" == "true" ]; then
          echo "‚úÖ .dart_tool Cache HIT"
        else
          echo "‚ö†Ô∏è .dart_tool Cache MISS"
        fi

    # Setup Dart SDK
    - name: Download Dart SDK
      uses: dart-lang/setup-dart@v1

    # Activate FVM and Melos globally
    - name: Activate FVM and Melos globally
      run: |
        dart pub global activate fvm
        dart pub global activate melos

    # Add pub-cache bin to PATH
    - name: Add global pub-cache bin to PATH
      run: echo "$HOME/.pub-cache/bin" >> $GITHUB_PATH

    # Install Flutter SDK from FVM config + log
    - name: Install Flutter SDK from FVM config
      run: |
        if [ -d "${FVM_CACHE_PATH}/versions/${FLUTTER_VERSION}" ]; then
          echo "‚úÖ Flutter SDK ${FLUTTER_VERSION} FOUND in cache at ${FVM_CACHE_PATH}/versions/${FLUTTER_VERSION}"
        else
          echo "‚¨áÔ∏è Flutter SDK ${FLUTTER_VERSION} NOT FOUND in cache, downloading..."
          fvm install ${FLUTTER_VERSION}
        fi
        fvm use ${FLUTTER_VERSION} --force
        fvm flutter --version
        fvm list
    # Flutter pub get (optional n·∫øu c·∫ßn)
    - name: Flutter pub get (root)
      run: fvm flutter pub get

    # Analyze
    - name: Analyze
      run: fvm flutter analyze .
